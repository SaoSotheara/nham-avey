# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminCreateRestaurantInput {
  address: String!
  categories: [String!]
  coverImg: String!
  name: String!
  vendorId: String!
}

input AdminUpdateRestaurantInput {
  address: String
  categories: [String!]
  coverImg: String
  name: String
  restaurantId: Float!
  vendorId: String
}

type AllCategoriesOutput {
  categories: [Category!]
  error: String
  ok: Boolean!
}

type Category {
  countRestaurants: Int!
  coverImageUrl: String
  createdAt: DateTime!
  id: Float!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

input CreateAccountInput {
  email: String!
  password: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
  user: User
}

input CreateDishInput {
  description: String!
  name: String!
  options: [DishOptionInputType!]
  price: Int!
  restaurantId: Int!
}

type CreateDishOutput {
  error: String
  ok: Boolean!
}

input CreateOrderInput {
  items: [CreateOrderItemInput!] = []
  restaurantId: Int!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemOptionInputType!] = []
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
  orderId: Int
}

input CreatePaymentInput {
  restaurantId: Int!
  transactionId: String!
}

type CreatePaymentOutput {
  error: String
  ok: Boolean!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteDishInput {
  dishId: Int!
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type Dish {
  createdAt: DateTime!
  description: String!
  id: Float!
  name: String!
  options: [DishOption!]
  photo: String
  price: Int!
  restaurant: Restaurant
  updatedAt: DateTime!
}

type DishChoice {
  extra: Int
  name: String!
}

input DishChoiceInputType {
  extra: Int
  name: String!
}

type DishOption {
  choices: [DishChoice!]
  extra: Int
  name: String!
}

input DishOptionInputType {
  choices: [DishChoiceInputType!]
  extra: Int
  name: String!
}

input EditDishInput {
  description: String
  dishId: Int!
  name: String
  options: [DishOptionInputType!]
  price: Int
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

input EditOrderInput {
  id: Float!
  status: OrderStatus!
}

type EditOrderOutput {
  error: String
  ok: Boolean!
}

input GetOrderInput {
  id: Float!
}

type GetOrderOutput {
  error: String
  ok: Boolean!
  order: Order
}

input GetOrdersInput {
  status: OrderStatus
}

type GetOrdersOutput {
  error: String
  ok: Boolean!
  orders: [Order!]
}

type GetPaymentsOutput {
  error: String
  ok: Boolean!
  payments: [Payment!]
}

type Mutation {
  adminCreateRestaurant(input: AdminCreateRestaurantInput!): CreateRestaurantOutput!
  adminUpdateRestaurant(input: AdminUpdateRestaurantInput!): UpdateRestaurantOutput!
  createAdmin(input: CreateAccountInput!): CreateAccountOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
  createPayment(input: CreatePaymentInput!): CreatePaymentOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  deleteRestaurant(restaurantId: Int!): DeleteRestaurantOutput!
  editDish(input: EditDishInput!): EditDishOutput!
  editOrder(input: EditOrderInput!): EditOrderOutput!
  signUpCustomer(input: SignUpAccountInput!): SignUpAccountOutput!
  signUpVendor(input: SignUpAccountInput!): SignUpAccountOutput!
  takeOrder(input: TakeOrderInput!): TakeOrderOutput!
  updateMeAsAdmin(input: UpdateProfileInput!): UpdateProfileOutput!
  updateMeAsCustomer(input: UpdateProfileInput!): UpdateProfileOutput!
  updateMeAsVendor(input: UpdateProfileInput!): UpdateProfileOutput!
  vendorCreateRestaurant(input: VendorCreateRestaurantInput!): CreateRestaurantOutput!
  vendorUpdateRestaurant(input: VendorUpdateRestaurantInput!): UpdateRestaurantOutput!
}

type MyRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type Order {
  createdAt: DateTime!
  customer: User
  driver: User
  id: Float!
  items: [OrderItem!]!
  restaurant: Restaurant
  status: OrderStatus!
  total: Float
  updatedAt: DateTime!
}

type OrderItem {
  createdAt: DateTime!
  dish: Dish!
  id: Float!
  options: [OrderItemOption!]
  updatedAt: DateTime!
}

type OrderItemOption {
  choice: String
  name: String!
}

input OrderItemOptionInputType {
  choice: String
  name: String!
}

enum OrderStatus {
  Cooked
  Cooking
  Delivered
  Pending
  PickedUp
}

input OrderUpdatesInput {
  id: Float!
}

type PaginatedCategoryRestaurantOutput {
  category: Category
  error: String
  hasNext: Boolean
  hasPrevious: Boolean
  matchedCount: Int
  ok: Boolean!
  pageCount: Int
  restaurants: [Restaurant!]
}

type PaginatedRestaurantsOutput {
  error: String
  hasNext: Boolean
  hasPrevious: Boolean
  matchedCount: Int
  ok: Boolean!
  pageCount: Int
  restaurants: [Restaurant!]
}

type PaginatedUsersOutput {
  error: String
  hasNext: Boolean
  hasPrevious: Boolean
  matchedCount: Int
  ok: Boolean!
  pageCount: Int
  users: [User!]
}

type Payment {
  createdAt: DateTime!
  id: Float!
  restaurant: Restaurant!
  restaurantId: Int!
  transactionId: String!
  updatedAt: DateTime!
  user: User!
}

type Query {
  adminGetRestaurants(page: Int = 1, q: String, take: Int = 20): PaginatedRestaurantsOutput!
  adminGetUsers(page: Int = 1, q: String, role: UserRole, take: Int = 20): PaginatedUsersOutput!
  allCategories: AllCategoriesOutput!
  categoryRestaurantBySlug(page: Int = 1, slug: String!, take: Int = 20): PaginatedCategoryRestaurantOutput!
  getOrder(input: GetOrderInput!): GetOrderOutput!
  getOrders(input: GetOrdersInput!): GetOrdersOutput!
  getPayments: GetPaymentsOutput!
  myRestaurantById(restaurantId: Int!): MyRestaurantOutput!
  myRestaurants(page: Int = 1, q: String, take: Int = 20): PaginatedRestaurantsOutput!
  pubicGetRestaurants(page: Int = 1, q: String, take: Int = 20): PaginatedRestaurantsOutput!
  publicGetRestaurantById(restaurantId: Int!): RestaurantOutput!
}

type Restaurant {
  address: String!
  categories: [Category!]
  coverImg: String!
  createdAt: DateTime!
  id: Float!
  isPromoted: Boolean!
  menu: [Dish!]
  name: String!
  orders: [Order!]
  promotedUntil: DateTime
  updatedAt: DateTime!
  vendor: User!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

input SignUpAccountInput {
  email: String!
  password: String!
}

type SignUpAccountOutput {
  error: String
  ok: Boolean!
  signInToken: String
  user: User
}

type Subscription {
  cookedOrders: Order!
  orderUpdates(input: OrderUpdatesInput!): Order!
  pendingOrders: Order!
}

input TakeOrderInput {
  id: Float!
}

type TakeOrderOutput {
  error: String
  ok: Boolean!
}

input UpdateProfileInput {
  email: String
  password: String!
}

type UpdateProfileOutput {
  error: String
  ok: Boolean!
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  orders: [Order!]
  payments: [Payment!]
  restaurants: [Restaurant!]
  rides: [Order!]
  roles: [UserRole!]!
  updatedAt: DateTime!
  verified: Boolean!
}

enum UserRole {
  Admin
  Customer
  Driver
  Vendor
}

input VendorCreateRestaurantInput {
  address: String!
  categories: [String!]
  coverImg: String!
  name: String!
}

input VendorUpdateRestaurantInput {
  address: String
  categories: [String!]
  coverImg: String
  name: String
  restaurantId: Float!
}